import{az as n,o,c as l,k as m,aa as a,b as r,a6 as e,q as p,s as _,H as c,e as t}from"../modules/vue-qDBvoHgk.js";import{I as d}from"./default-BdmvwUgt.js";import{_ as u,b$ as i}from"../index-Do_Fusig.js";import{p as f,u as h,f as k}from"./context-C-TBvdeV.js";import"../monaco/bundled-types-B2pegga4.js";import"../modules/file-saver-DY7lxZlc.js";import"../modules/shiki-BnrpArDE.js";const v=t("h1",null,"List",-1),x=t("blockquote",null,[t("p",null,[e("A data type for immutable linked lists representing ordered collections of elements of type "),t("code",null,"A"),e(".")])],-1),b={class:"mt-4"},y={class:"mt-4"},B=t("code",null,"O(1)",-1),I=t("code",null,"O(n)",-1),O={__name:"127",setup(P){return f(i),h(),(T,g)=>{const s=n("click");return o(),l(d,p(_(c(k)(c(i),126))),{default:m(()=>[v,x,a((o(),r("blockquote",b,[e("Optimal for LIFO, stack-like access patterns")])),[[s]]),a((o(),r("h4",y,[e("Performance")])),[[s]]),a((o(),r("p",null,[e("Time: "),B,e(" prepend and head/tail access. Most other operations are "),I])),[[s]]),a((o(),r("p",null,[e("Space: Implements structural sharing of the tail list. This means that many operations are either zero- or constant-memory cost.")])),[[s]])]),_:1},16)}}},F=u(O,[["__file","/@slidev/slides/127.md"]]);export{F as default};
